'''
生成制定长度的验证码，数字字母组成
'''
import numpy as np

def generate_code(len=4):
    all_chars='0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    code_str=''
    for _ in range(0,len):
        code_str+=all_chars[np.random.randint(0,61)]
    return code_str
 
 
 '''
 获得文件的后缀名
 '''
 def get_suffix(filename, has_dot=False):
    pos=filename.rfind('.')
    if 0<pos<len(filename)-1:
        
        suffix=filename[pos:] if has_dot else filename[pos+1:]
        return suffix
    else:
        return ''
        
  
  '''
  返回一列数值中的最大值与第二大数值
  '''
  def get_max(x):
    x1,x2=(x[0],x[1]) if x[0]>x[1] else (x[1],x[0])
    for index in range(2,len(x)):
        if x[index]>x1:
            x2=x1
            x1=x[index]
        elif x[index]>x2:
            x2=x[index]
    return (x1,x2)
  
 
 '''
 给出日期，输出这是当年的第几天
 '''
 def is_leap_year(year):
    if year%4==0 and year%100!=0 or year%400==0:
        return True
    else:
        return False
  
import numpy as np
def which_day(year,month,day):
    days=[[31,29,31,30,31,30,31,31,30,31,30,31],[31,28,31,30,31,30,31,31,30,31,30,31]]
    if is_leap_year:
        return np.sum(days[0][:month-1])+day
    else:
        return np.sum(days[1][:month-1])+day  
  
 '''
 打印杨辉三角
 '''
 def yang_hui(n):
    yh=[[]]*n
    for  row in range(0,n):
        yh[row]=[None]*(row+1)
        for col in range(0,len(yh[row])):
            if col==0 or col==row:
                yh[row][col]=1
            else:
                yh[row][col]=yh[row-1][col-1]+yh[row-1][col]
                
        print(yh[row])
  
'''
双色球
'''
import numpy as np
import random
def display(selected_balls):
    for index,value in enumerate(selected_balls):
        if index==len(selected_balls)-1:
            print('|',end='')
        print('%02d'% value,end=' ')
        
def select_balls():
    red_balls=[x for x in range(1,34)]
    selected=random.sample(red_balls,6)  #red_balls.random_sample(6)#
    selected.sort()
    selected.append(np.random.randint(1,16))
    display(selected)


'''
《幸运的基督徒》
有15个基督徒和15个非基督徒在海上遇险，为了能让一部分人活下来不得不将其中15个人扔到海里面去，有个人想了个办法就是大家围成一个圈，由某个人开始从1报数，
报到9的人就扔到海里面，他后面的人接着从1开始报数，报到9的人继续扔到海里面，直到扔掉15个人。由于上帝的保佑，15个基督徒都幸免于难，问这些人最开始是怎么
站的，哪些位置是基督徒哪些位置是非基督徒。
'''
num=15
c=9
n=1
list=[x for x in range(1,31)]
while len(list)>num:
    if n%c!=0:
        list=list[1:]+[list[0]]
        n+=1
    else:
        list=list[1:]
        n+=1
    print(list)


'''
井字棋游戏
'''
  




'''
创建类
'''
#Student类
class Student(object):
    
    def __init__(self,name,age):
        self.name=name
        self.age=age
        
    def study(self,course_name):
        print('%s 正在学习%s' % (self.name,course_name))
    
    def watch_movie(self):
        if self.age<18:
            print('%s只能看《熊出没》'%self.name)
        else:
            print('%s正在看岛国电影'%self.name)
            
#Clock类
from time import sleep
class Clock(object):
    
    def __init__(self,second=0,minute=0,hour=0):
        self.second=second
        self.minute=minute
        self.hour=hour
        
    def run(self):
        self.second+=1
        if self.second==60:
            self.second=0
            self.minute+=1
            if self.minute==60:
                self.minute=0
                self.hour+=1
                if self.hour==24:
                    self.hour=0
                    
    def show(self):
        print('%d:%d:%d' % (self.hour,self.minute,self.second))

def main():
    clock=Clock(second=24,minute=57,hour=23)
    n=1
    while n<300:
        clock.run()
        sleep(1)
        clock.show()
        n+=1


#Point类
import math
class  Point1(object):
    def __init__(self,x=0,y=0):
        self.x=x
        self.y=y
        
    def move_to(self,x,y):
        self.x=x
        self.y=y
        
    def move_by(self,dx,dy):
        self.x+=dx
        self.y+=dy
        
    def distance_to(self,other):
        a=self.x-other.x
        b=self.y-other.y
        return math.sqrt(a**2+b**2)
    
    def __str__(self):
        return '(%s,%s)' % (str(self.x),str(self.y))
    
def main():
    p1=Point1(3,5)
    p2=Point1()
    print(p2)
    p1.move_by(-1,2)
    print(p1)
    print(p1.distance_to(p2))

if __name__=='__main__':
    main()

'''
#@property
#装饰类属性的读取与设置
__slots__
规定类可以有的属性
'''
class Person(object):
    __slots__=('_name','_age','_gender')
    def __init__(self,name,age):
        self._name=name
        self._age=age
    
    @property
    def age(self):
        return self._age
    
    @age.setter
    def age(self,age):
        self._age=age
        
    @property
    def name(self):
        return self._name
        
    def play(self):
        if self._age<=16:
            print('%s正在玩五子棋'%self._name)
        else:
            print('%s正在玩魔兽'%self._name)
 
 
 
 #静态方法
 from math import sqrt
class Triangle(object):
    def __init__(self,a,b,c):
        self._a=a
        self._b=b
        self._c=c
    
    @staticmethod
    def is_valid(a,b,c):
        return a+b>c and a+c>b and b+c>a
    
    def perimeter(self):
        return self._a+self._b+self._c
    
    def area(self):
        half=self.perimeter()/2
        return sqrt(half * (half - self._a) * (half - self._b) * (half - self._c))

def main():
    a,b,c=3,4,5
    if Triangle.is_valid(a,b,c):
        t=Triangle(a,b,c)
        print(t.perimeter())
        print(t.area())
    else:
        print('无法构成三角形')
 
#类方法
#执行一个动作并创建实例
@classmethod
def now(cls):
    '''
    pass
    '''
 
 
 
